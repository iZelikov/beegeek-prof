def filter_numbers():
    data = ['Timur', -16.648911695768902, 'six', -202, 883.0093275936454, -765, (3, 4), -105.10718000213546, 976,
            -308.96857946288094, 458, ['one', 'two'], 479.92207220345927, -87, -71, 'twelve', 112, -621,
            -715.0179551194733, 'seven', 229, 729, -358, [1, 2, 3], -974, 882, -894.4709033242768, '',
            323.7720806756133, 'beegeek', -224, 431, 170.6353248658936, -343.0016746052049, 'number',
            104.17133679352878, [], -353.5964777099863, 'zero', -113, 288, None, -708.3036176571618]
    print(*map(int, filter(lambda x: type(x) in {int, float}, data)), sep="\n")


def sum_squares():
    numbers = [4754, -4895, -364, -4764, 4683, 1639, -43, 228, -2701, -1503, 1223, 4340, -1296, 3939, -345, 623, -3275,
               1003, 4367, -1739, 550, -1217, -1334, 1526, -4359, -3028, -4663, 3356, 3887, 4297, -1982, 1013, 3299,
               3556, -3324, 417, 3531, -3134, 1782, 4439, 1652, -985, 4327, 1517, 1225, -915, 2808, -3851, -1005, 3396,
               2842, -3879, -3824, -3805, 1609, -4741, -3072, 3573, 4680, 588, -1430, 2378, -1095, -343, 4357, -2164,
               -3304, 4354, 4926, -352, -1187, -3313, 2741, 4786, -2689, 741, 4558, 1442, 62, -1099, -2201, -16, -3115,
               1862, 2384, 4072, -90, 204, 1158, -3134, -2512, 756, 4148, 4370, 1756, 3609, -1148, -3909, 4123, -2906,
               69, 96, 1111]

    def my_filter(item: int) -> bool:
        if not item % 9:
            if len(str(abs(item))) == 2:
                return True
        return False

    print(sum(map(lambda x: x ** 2, filter(my_filter, numbers))))


def filter_names():
    names = ['ульяна', 'арина', 'Дмитрий', 'Сергей', 'Яна', 'мила', 'Ольга', 'софья', 'семён', 'Никита', 'маргарита',
             'Василиса', 'Кирилл', 'александр', 'александра', 'Иван', 'андрей', 'Родион', 'максим', 'алиса', 'Артём',
             'софия', 'владимир', 'дамир', 'Валерий', 'степан', 'Алексей', 'Марк', 'олег', 'ирина', 'Милана', 'мия',
             'денис', 'Фёдор', 'Елизавета', 'айлин', 'Варвара', 'валерия', 'Алёна', 'Николь', 'юлия', 'Ксения', 'пётр',
             'георгий', 'Мария', 'глеб', 'илья', 'Захар', 'Дарья', 'Евгения', 'матвей', 'Серафим', 'екатерина',
             'Тимофей', 'виктор', 'Егор', 'Ника', 'анна', 'даниил', 'тихон', 'вера', 'кира', 'Эмилия', 'Виктория',
             'Игорь', 'полина', 'алина', 'Давид', 'анастасия', 'Вероника', 'ярослав', 'Руслан', 'татьяна', 'Демид',
             'амелия', 'Элина', 'Арсен', 'евгений', 'мадина', 'дарина', 'Савелий', 'Платон', 'Аделина', 'диана', 'Айша',
             'павел', 'Стефания', 'Тимур', 'Ева', 'Елисей', 'Артемий', 'григорий', 'Мирон', 'Мирослава', 'Мира',
             'Марат', 'Лилия', 'роман', 'владислав', 'Леонид']
    print(*sorted(filter(lambda x: x[0] in 'АМ' and len(x) > 4, map(str.title, names))))


fib = lambda n: fib(n - 1) + fib(n - 2) if n > 2 else 1


def print_operation_table(operation, rows: int, cols: int):
    [print(*(str(operation(n, m)).ljust(3) for m in range(1, cols + 1))) for n in range(1, rows + 1)]

def verification(login:str, password: str, success, failure):
    if all(map(lambda x: ord(x) not in range(ord('A'), ord('z')+1), password)):
        return failure(login, "в пароле нет ни одной буквы")
    if all(map(lambda x: ord(x) not in range(ord('A'), ord('Z')+1), password)):
        return failure(login, "в пароле нет ни одной заглавной буквы")
    if all(map(lambda x: ord(x) not in range(ord('a'), ord('z')+1), password)):
        return failure(login, "в пароле нет ни одной строчной буквы")
    elif not any(map(str.isdigit, password)):
        return failure(login, "в пароле нет ни одной цифры")
    return success(login)
